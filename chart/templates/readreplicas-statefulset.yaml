apiVersion: "apps/v1"
kind: StatefulSet
metadata:
  name: "{{ template "neo4j.replica.fullname" . }}"
spec:
  serviceName: "{{ template "neo4j.replica.fullname" . }}"
{{- if lt .Values.coreServers 3.0 }}
  # Replicas are only meaningful if we have a core set.  Single mode operations here.
  replicas: 0
{{ else }}  
  replicas: {{ .Values.readReplicaServers }}
{{- end }}
  selector:
    matchLabels:
      release: {{ .Values.name | quote }}
      app: {{ template "neo4j.name" . }}
      component: readreplica
  template:
    metadata:
      labels:
        release: {{ .Values.name | quote }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        app: {{ template "neo4j.name" . }}
        component: readreplica
    spec:
      containers:
      - name: {{ template "neo4j.fullname" . }}
        image: "{{ .Values.image }}"
        imagePullPolicy: "{{ .Values.imagePullPolicy }}"
        env:
          - name: NEO4J_ACCEPT_LICENSE_AGREEMENT
            value: "{{ .Values.acceptLicenseAgreement }}"
          - name: NUMBER_OF_CORES
            value: "{{ .Values.coreServers }}"
          - name: AUTH_ENABLED
            value: "{{ .Values.authEnabled }}"
{{- if lt .Values.coreServers 3.0 }}
          - name: NEO4J_dbms_mode
            value: SINGLE
{{ else }}
          - name: NEO4J_dbms_mode
            value: READ_REPLICA
          - name: NEO4J_causal__clustering_discovery__type
            value: LIST
          - name: NEO4J_causal__clustering_minimum__core__cluster__size__at__formation
            value: "3"
          - name: NEO4J_causal__clustering_minimum__core__cluster__size__at__runtime
            value: "3"
          - name: NEO4J_causal__clustering_initial__discovery__members
            value: "{{ template "neo4j.fullname" . }}-core-0.{{ template "neo4j.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:5000,{{ template "neo4j.fullname" . }}-core-1.{{ template "neo4j.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:5000,{{ template "neo4j.fullname" . }}-core-2.{{ template "neo4j.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:5000"
  {{- end }}
          {{- if .Values.authEnabled }}
          - name: NEO4J_SECRETS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ template "neo4j.secrets.fullname" . }}
                key: neo4j-password
          {{- end }}
        command:
          - "/bin/bash"
          - "-c"
          - |
            export HOST=$(hostname -f)
            export NEO4J_HOME=/var/lib/neo4j
            running_as_root () {
                test "$(id -u)" = "0"
            }

            create_dir_if_necessary () {
                for directory in "$@"; do
                    if [ ! -d "${directory}" ]; then
                        mkdir -p "${directory}"
                        chown "${userid}":"${groupid}" "${directory}"
                        chown "${userid}":"${groupid}" "${certificates_dir}"
                    fi
                done
            }

            create_dir_if_necessary

            generate_self_signed_certificates () {
                local ip_address="0.0.0.0"
                local dns_address="neo4j_k8s"
                local certificates_dir="${NEO4J_HOME}/certificates"
                if [ -d /ssl ]; then
                    certificates_dir="/ssl"
                fi

                create_dir_if_necessary "${certificates_dir}/bolt/trusted" \
                    "${certificates_dir}/bolt/revoked" \
                    "${certificates_dir}/https/trusted" \
                    "${certificates_dir}/https/revoked" \
                    "${certificates_dir}/cluster/trusted" \
                    "${certificates_dir}/cluster/revoked"
                local openssl_config="
            [ req ]
            prompt = no
            distinguished_name = req_distinguished_name
            x509_extensions = san_self_signed
            [ req_distinguished_name ]
            CN=neo4j_k8s
            [ san_self_signed ]
            subjectAltName = IP:0.0.0.0,DNS:neo4j_k8s
            subjectKeyIdentifier = hash
            authorityKeyIdentifier = keyid:always,issuer
            basicConstraints = CA:false
            keyUsage = nonRepudiation, digitalSignature, keyEncipherment, dataEncipherment, keyCertSign, cRLSign
            extendedKeyUsage = serverAuth, clientAuth, timeStamping
            "

                local private_key="${certificates_dir}/bolt/private.key"
                local public_cert="${certificates_dir}/bolt/public.crt"

                openssl req \
                  -newkey rsa:2048 -nodes \
                  -keyout "${private_key}" \
                  -x509 -sha256 -days 800 \
                  -config <(echo "${openssl_config}") \
                  -out "${public_cert}"

            chown "${userid}":"${groupid}" "${private_key}"
                if running_as_root; then
                    chmod 444 "${private_key}"
                else
                    chmod 440 "${private_key}"
                fi
                chown "${userid}":"${groupid}" "${public_cert}"
                chmod 444 "${public_cert}"

                cp "${private_key}" "${certificates_dir}/https/"
                cp "${public_cert}" "${certificates_dir}/https/"
                cp "${private_key}" "${certificates_dir}/cluster/"
                cp "${public_cert}" "${certificates_dir}/cluster/"
                cp "${public_cert}" "${certificates_dir}/cluster/trusted/"
            }

            if [ ! -f "$NEO4J_HOME/certificates/https/private.key" ]; then
                echo "Certificates does not exist, generating certificates..."
                generate_self_signed_certificates
            fi

            export NEO4J_dbms_default__advertised__address=$HOST
            export NEO4J_dbms_connector_http_advertised__address=:{{ .Values.ports.http }}
            export NEO4J_dbms_connector_https_enabled=true
            export NEO4J_dbms_ssl_policy_https_client__auth=NONE
            export NEO4J_dbms_connector_https_advertised__address=:{{ .Values.ports.https }}
            export NEO4J_dbms_ssl_policy_https_enabled=true
            export NEO4J_dbms_ssl_policy_https_base__directory=/var/lib/neo4j/certificates/https
            export NEO4J_dbms_connector_bolt_advertised__address=:{{ .Values.ports.bolt }}
            export NEO4J_dbms_ssl_policy_bolt_enabled=true
            export NEO4J_dbms_ssl_policy_bolt_client__auth=NONE
            export NEO4J_dbms_ssl_policy_bolt_base__directory=/var/lib/neo4j/certificates/bolt
            export NEO4J_dbms_backup_enabled=true
            export NEO4J_dbms_backup_listen__address=$HOST:{{ .Values.ports.backup }}
            export NEO4J_dbms_jvm_additional="-XX:+ExitOnOutOfMemoryError -Dunsupported.dbms.udc.source=google-gke-core"

            export NEO4J_dbms_security_procedures_unrestricted="apoc.*"
            export NEO4J_dbms_connector_bolt_tls__level=OPTIONAL
            export NEO4J_apoc_import_file_enabled=true

            # These settings are *not* overrideable, because they must match the addresses the
            # core members see to avoid akka rejections.
            export NEO4J_causal__clustering_discovery__advertised__address=$HOST:5000
            export NEO4J_causal__clustering_transaction__advertised__address=$HOST:6000
            export NEO4J_causal__clustering_raft__advertised__address=$HOST:7000

            if [ "${AUTH_ENABLED:-}" == "true" ]; then
              export NEO4J_AUTH="neo4j/${NEO4J_SECRETS_PASSWORD}"
            else
              export NEO4J_AUTH="none"
            fi
            # Once passed through to auth, unset this so Neo4j doesn't misinterpret it as config.
            unset NEO4J_SECRETS_PASSWORD

            echo "Starting Neo4j READ_REPLICA on $HOST"
            exec /docker-entrypoint.sh "neo4j"
        ports:
          - containerPort: 5000
            name: discovery
          - containerPort: 7000
            name: raft
          - containerPort: 6000
            name: tx
          - containerPort: 7474
            name: browserhttp
          - containerPort: 7473
            name: browserhttps
          - containerPort: 7687
            name: bolt
        # securityContext:
        #   privileged: true
        volumeMounts:
        - name: datadir
          mountPath: "{{ .Values.volumeMountPath }}"
          {{- if .Values.volumeSubPath }}
          subPath: {{ .Values.volumeSubPath }}
          {{- end }}
        # Users may uncomment this and adjust that mount point to 
        # attach custom plugins.  For now, plugins are injected into the
        # solution container.        
        #- name: plugins
        #  mountPath: /plugins
        readinessProbe:
          tcpSocket:
            port: {{ .Values.ports.bolt }}
          initialDelaySeconds: 30
          periodSeconds: 3
        livenessProbe:
          initialDelaySeconds: 60
          tcpSocket:
            port: {{ .Values.ports.bolt }}
        resources:
          requests:
            cpu: "{{ .Values.cpuRequest }}"
            memory: "{{ .Values.memoryRequest }}"
          limits:
            cpu: "{{ .Values.cpuLimit }}"
            memory: "{{ .Values.memoryLimit }}"
{{- if .Values.coreSidecarContainers }}
{{ toYaml .Values.coreSidecarContainers | indent 6 }}
{{- end }}
{{- if .Values.imagePullSecret }}
      imagePullSecrets:
      - name: {{ .Values.imagePullSecret }}
{{- end -}}
{{- if .Values.coreInitContainers }}
      initContainers:
{{ toYaml .Values.coreInitContainers | indent 6 }}
{{- end }}
      volumes:
        - name: plugins
          emptyDir: {}
{{- if .Values.maintenanceServiceKeySecret }}
        - name: "{{ .Values.maintenanceServiceKeySecret }}"
          secret:
            secretName: "{{ .Values.maintenanceServiceKeySecret }}"
{{- end }}
  volumeClaimTemplates:
    - metadata:
        name: datadir
        annotations:
        {{- if .Values.volumeAnnotations }}
{{ toYaml .Values.volumeAnnotations | indent 12 }}
        {{- end }}
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: "{{ .Values.volumeStorageClass }}"
        resources:
          requests:
            storage: "{{ .Values.volumeSize }}"
