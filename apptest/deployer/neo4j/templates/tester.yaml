apiVersion: v1
kind: Pod
metadata:
  name: "{{ .Release.Name }}-tester"
  labels:
    app.kubernetes.io/name: "{{ .Release.Name }}"
  annotations:
    helm.sh/hook: test-success
spec:
  containers:
  - name: tester
    image: "{{ .Values.tester.image }}"
    volumeMounts:
    - name: secret-volume
      mountPath: /secret
      readOnly: true
    - name: config-volume
      mountPath: /tester
      readOnly: true
    command: ["bash"]
    args: ["/tester/run.sh"]
  restartPolicy: Never
  volumes:
  - name: secret-volume
    secret:
      secretName: "{{ template "neo4j.secrets.fullname" . }}"
      items:
      - key: neo4j-password
        path: neo4j-password
  - name: config-volume
    configMap:
      name: "{{ .Release.Name }}-test"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ .Release.Name }}-test"
  labels:
    app.kubernetes.io/name: "{{ .Release.Name }}"
  annotations:
    marketplace.cloud.google.com/verification: test
data:
  run.sh: |-
    set -x
    host="{{ .Release.Name }}-neo4j.{{ .Release.Namespace }}.svc.cluster.local"
    replica_host="{{ .Release.Name }}-neo4j-readreplica.{{ .Release.Namespace }}.svc.cluster.local"
    echo "HOST $host"
    # This endpoint proves availability of the overall service
    endpoint="http://$host:{{ .Values.ports.http }}"
    echo "ENDPOINT $endpoint"
    # Mounted secret
    NEO4J_SECRETS_PASSWORD=$(cat /secret/neo4j-password)
    auth="neo4j:${NEO4J_SECRETS_PASSWORD}"
    echo "AUTH $auth"
    CORES={{ .Values.coreServers }}
    READ_REPLICAS={{ .Values.readReplicaServers }}
    echo "CORES $CORES"
    echo "RRs $READ_REPLICAS"

    # When test resources are deployed cluster hasn't had a chance to form yet.
    # This polls in a loop waiting for cluster to become available, and gives up/fails
    # tests if it doesn't work within attempts.
    attempt=0
    attempts=100

    while true; do
      attempt=$[$attempt + 1]
      curl -s -I $endpoint/ | grep "200 OK"
      if [ $? -eq 0 ] ; then
        echo "✔️ Neo4j is up at attempt $attempt; HTTP port {{ .Values.ports.http }}"
        break
      fi

      if [ $attempt -ge "$attempts" ]; then
        echo "❌ REST API seems not to be coming up, giving up after $attempts attempts"
        exit 1
      fi

      echo "Sleeping; not up yet after $attempt attempts"
      sleep 5
    done

    # At this point the service endpoint proves that at least one host is up.
    # Provide just a bit more time for all of them to finish coming up because we'll
    # be testing them individually.
    echo "Waiting for formation to finish"
    sleep 10

    # Pass index ID to get hostname for that pod.
    function core_hostname {
      echo "{{ .Release.Name }}-neo4j-core-$1.{{ .Release.Name }}-neo4j.{{ .Release.Namespace }}.svc.cluster.local"
    }

    function replica_hostname {
      echo "{{ .Release.Name }}-replica-$1.{{ .Release.Name }}-readreplica.{{ .Release.Namespace }}.svc.cluster.local"
    }

    test_index=0

    function succeed {
      echo "✔️  Test $test_index: $1"
      test_index=$[$test_index + 1]
    }

    function fail {
      echo "❌ Test $test_index: $1"
      echo "Additional information: " "$2"
      exit 1
    }

    function cypher {
      # Use routing driver by default, send query wherever.
      DEFAULT_ENDPOINT="neo4j://$host:{{ .Values.ports.bolt}}"

      # If caller specified, use a specific endpoint to route a query to just one node.
      ENDPOINT=${2:-$DEFAULT_ENDPOINT}

      echo "$1" | cypher-shell --encryption false -u neo4j -a "$ENDPOINT" -p "$NEO4J_SECRETS_PASSWORD"
    }

    function runtest {
      # Use routing driver by default, send query wherever.
      DEFAULT_ENDPOINT="neo4j://$host:{{ .Values.ports.bolt}}"

      # If caller specified, use a specific endpoint to route a query to just one node.
      ENDPOINT=${3:-$DEFAULT_ENDPOINT}

      echo "Running $1 against $ENDPOINT"
      output=$(cypher "$2" "$3")

      if [ $? -eq 0 ] ; then  
        succeed "$1"
      else
        echo "Last output -- $output"
        fail "$1" "$output"
      fi
    }

    test="HTTPS is available, port {{ .Values.ports.https }}"
    curl --insecure https://$host:{{ .Values.ports.https }}/
    if [ $? -eq 0 ] ; then
      succeed "$test"
    else
      fail "$test"
    fi

    echo "Basic topology upfront"
    cypher "CALL dbms.cluster.overview();"

    runtest "Bolt is available, port {{ .Values.ports.bolt }}" "RETURN 'yes';"
    runtest "Basic read queries, encrypted connection"         "MATCH (n) RETURN COUNT(n);"
    runtest "Database is in clustered mode"                    "CALL dbms.cluster.overview();" 
    runtest "Cluster accepts writes"                           'CREATE (t:TestNode) RETURN count(t);'

    # Data from server on cluster topology.
    topology=$(cypher "CALL dbms.cluster.overview();")
    echo "TOPOLOGY $topology"

    # LEADERS
    leaders=$(echo $topology | grep -o LEADER | wc -l)
    test="Cluster has 1 leader"
    if [ $leaders -eq 1 ] ; then
      succeed "$test"
    else
      fail "$test" "$leaders leaders"
    fi

    # FOLLOWERS
    followers=$(echo $topology | grep -o FOLLOWER | wc -l)
    test="Cluster has 1-CORES followers"
    if [ $followers -eq $((CORES-1)) ] ; then
      succeed "$test"
    else
      fail "$test" "$followers followers"
    fi

    # REPLICAS
    read_replicas=$(echo $topology | grep -o READ_REPLICA | wc -l)
    test="Cluster has $READ_REPLICAS read replicas"
    if [ $read_replicas -eq $READ_REPLICAS ] ; then
      succeed "$test"
    else
      fail "$test" "$read_replicas replicas"
    fi

    # Each core is individually up and configured.
    for id in $(seq 0 $((CORES - 1))); do
      core_host=$(core_hostname $id)
      core_endpoint="bolt://$core_host:{{ .Values.ports.bolt }}"

      test="Core host $id of $CORES -- $core_endpoint is available"
      runtest "$test" "MATCH (n) RETURN COUNT(n);" "$core_endpoint"

      test="Core host $id of $CORES -- $core_endpoint has APOC installed correctly"
      runtest "$test" "RETURN apoc.version();" "$core_endpoint"

    done

    # Replicas are up and configured.
    replica_endpoint="bolt://$replica_host:{{ .Values.ports.bolt }}"
    test="Replica host -- $replica_endpoint is available"
    runtest "$test" "MATCH (n) RETURN COUNT(n);" "$replica_endpoint"

    test="Replica host -- $replica_endpoint has APOC installed correctly"
    runtest "$test" "RETURN apoc.version();" "$replica_endpoint"

    # Test for data replication.
    runtest "Sample canary write" 'CREATE (c:Canary) RETURN count(c);'
    echo "Sleeping a few seconds to permit replication"
    sleep 5

    # Check each core, count the canary writes. They should all agree.
    for id in $(seq 0 $((CORES - 1))); do
      core_host=$(core_hostname $id)
      # Use bolt driver, not routing driver, to ensure that test verifies data
      # exists on this host.
      core_endpoint="bolt://$core_host:{{ .Values.ports.bolt }}"
      test="Core host $id has the canary write"
      result=$(cypher "MATCH (c:Canary) WITH count(c) as x where x = 1 RETURN x;" "$core_endpoint")
      exit_code=$?
      if [ $exit_code -eq 0 ] ; then
        # Check that the data is there.
        found_results=$(echo "$result" | grep -o 1 | wc -l)

        if [ $found_results -eq 1 ] ; then
          succeed "$test"
        else 
          fail "$test" "Canary read did not return data -- $found_results found results from $result"
        fi
      else
        fail "$test" "Canary read failed to execute -- exit code $exit_code / RESULT -- $result"
      fi
    done

    test="Read Replica has the canary write"
    result=$(cypher "MATCH (c:Canary) WITH count(c) as x where x = 1 RETURN x;" "$replica_endpoint")
    exit_code=$?
    if [ $exit_code -eq 0 ] ; then
      found_results=$(echo "$result" | grep -o 1 | wc -l)

      if [ $found_results -eq 1 ] ; then
        succeed "$test" "Canary read did not return data -- $found_results found results from $result"
      else
        fail "$test" 
      fi
    else
      fail "$test" "Canary read did not return data -- exit code $exit_code / RESULT -- $result"
    fi

    echo "All good; testing completed"
    exit 0
